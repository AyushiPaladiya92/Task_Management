{"ast":null,"code":"import axios from \"axios\"; // Make sure to install axios if you haven't already\nimport { createSlice } from \"@reduxjs/toolkit\";\n\n// Action Types\nconst LOGIN_REQUEST = \"LOGIN_REQUEST\";\nconst LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nconst LOGIN_FAIL = \"LOGIN_FAIL\";\nconst LOGOUT = \"LOGOUT\";\n\n// Create a slice for auth\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    user: null,\n    loading: false,\n    error: null\n  },\n  reducers: {\n    loginRequest: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    loginSuccess: (state, action) => {\n      state.loading = false;\n      state.user = action.payload;\n    },\n    loginFail: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    logout: state => {\n      state.user = null;\n    }\n  }\n});\n\n// Action Creators\nexport const {\n  loginRequest,\n  loginSuccess,\n  loginFail,\n  logout\n} = authSlice.actions;\n\n// Async Action to handle login\nexport const loginUser = userData => async dispatch => {\n  try {\n    dispatch(loginRequest());\n\n    // Replace with your API endpoint\n    const response = await axios.post(\"/api/login\", userData);\n    dispatch(loginSuccess(response.data)); // Assuming response.data contains user info\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch(loginFail(message));\n  }\n};\n\n// Logout action\nexport const logoutUser = () => dispatch => {\n  dispatch(logout());\n};\n\n// Selector\nexport const selectAuth = state => state.auth;\n\n// Export the reducer\nexport default authSlice.reducer;","map":{"version":3,"names":["axios","createSlice","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","authSlice","name","initialState","user","loading","error","reducers","loginRequest","state","loginSuccess","action","payload","loginFail","logout","actions","loginUser","userData","dispatch","response","post","data","message","logoutUser","selectAuth","auth","reducer"],"sources":["D:/taskmanager-main/client/src/redux/actions/authActions.js"],"sourcesContent":["import axios from \"axios\"; // Make sure to install axios if you haven't already\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// Action Types\r\nconst LOGIN_REQUEST = \"LOGIN_REQUEST\";\r\nconst LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nconst LOGIN_FAIL = \"LOGIN_FAIL\";\r\nconst LOGOUT = \"LOGOUT\";\r\n\r\n// Create a slice for auth\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState: {\r\n    user: null,\r\n    loading: false,\r\n    error: null,\r\n  },\r\n  reducers: {\r\n    loginRequest: (state) => {\r\n      state.loading = true;\r\n      state.error = null;\r\n    },\r\n    loginSuccess: (state, action) => {\r\n      state.loading = false;\r\n      state.user = action.payload;\r\n    },\r\n    loginFail: (state, action) => {\r\n      state.loading = false;\r\n      state.error = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    },\r\n  },\r\n});\r\n\r\n// Action Creators\r\nexport const {\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginFail,\r\n  logout,\r\n} = authSlice.actions;\r\n\r\n// Async Action to handle login\r\nexport const loginUser = (userData) => async (dispatch) => {\r\n  try {\r\n    dispatch(loginRequest());\r\n    \r\n    // Replace with your API endpoint\r\n    const response = await axios.post(\"/api/login\", userData);\r\n\r\n    dispatch(loginSuccess(response.data)); // Assuming response.data contains user info\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    dispatch(loginFail(message));\r\n  }\r\n};\r\n\r\n// Logout action\r\nexport const logoutUser = () => (dispatch) => {\r\n  dispatch(logout());\r\n};\r\n\r\n// Selector\r\nexport const selectAuth = (state) => state.auth;\r\n\r\n// Export the reducer\r\nexport default authSlice.reducer;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO,CAAC,CAAC;AAC3B,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA,MAAMC,aAAa,GAAG,eAAe;AACrC,MAAMC,aAAa,GAAG,eAAe;AACrC,MAAMC,UAAU,GAAG,YAAY;AAC/B,MAAMC,MAAM,GAAG,QAAQ;;AAEvB;AACA,MAAMC,SAAS,GAAGL,WAAW,CAAC;EAC5BM,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,IAAI,EAAE,IAAI;IACVC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRC,YAAY,EAAGC,KAAK,IAAK;MACvBA,KAAK,CAACJ,OAAO,GAAG,IAAI;MACpBI,KAAK,CAACH,KAAK,GAAG,IAAI;IACpB,CAAC;IACDI,YAAY,EAAEA,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC/BF,KAAK,CAACJ,OAAO,GAAG,KAAK;MACrBI,KAAK,CAACL,IAAI,GAAGO,MAAM,CAACC,OAAO;IAC7B,CAAC;IACDC,SAAS,EAAEA,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC5BF,KAAK,CAACJ,OAAO,GAAG,KAAK;MACrBI,KAAK,CAACH,KAAK,GAAGK,MAAM,CAACC,OAAO;IAC9B,CAAC;IACDE,MAAM,EAAGL,KAAK,IAAK;MACjBA,KAAK,CAACL,IAAI,GAAG,IAAI;IACnB;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EACXI,YAAY;EACZE,YAAY;EACZG,SAAS;EACTC;AACF,CAAC,GAAGb,SAAS,CAACc,OAAO;;AAErB;AACA,OAAO,MAAMC,SAAS,GAAIC,QAAQ,IAAK,MAAOC,QAAQ,IAAK;EACzD,IAAI;IACFA,QAAQ,CAACV,YAAY,CAAC,CAAC,CAAC;;IAExB;IACA,MAAMW,QAAQ,GAAG,MAAMxB,KAAK,CAACyB,IAAI,CAAC,YAAY,EAAEH,QAAQ,CAAC;IAEzDC,QAAQ,CAACR,YAAY,CAACS,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;EACzC,CAAC,CAAC,OAAOf,KAAK,EAAE;IACd,MAAMgB,OAAO,GACXhB,KAAK,CAACa,QAAQ,IAAIb,KAAK,CAACa,QAAQ,CAACE,IAAI,CAACC,OAAO,GACzChB,KAAK,CAACa,QAAQ,CAACE,IAAI,CAACC,OAAO,GAC3BhB,KAAK,CAACgB,OAAO;IACnBJ,QAAQ,CAACL,SAAS,CAACS,OAAO,CAAC,CAAC;EAC9B;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAOL,QAAQ,IAAK;EAC5CA,QAAQ,CAACJ,MAAM,CAAC,CAAC,CAAC;AACpB,CAAC;;AAED;AACA,OAAO,MAAMU,UAAU,GAAIf,KAAK,IAAKA,KAAK,CAACgB,IAAI;;AAE/C;AACA,eAAexB,SAAS,CAACyB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}